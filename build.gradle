/**
 * 判断是否有jenkins
 */
static boolean isInJenkins() {
    Map<String, String> map = System.getenv()
    if (map == null) {
        return false
    }
    String str = map.get("Path")
    if (str != null) {
        return false
    } else {
        str = ""
        Iterator it = map.iterator()
        while (it.hasNext()) {
            str += it.next()
        }
        return str.contains("jenkins")
    }
}
/**
 * 获取当前git分支名称
 * @return
 */
def getGitBranch() {
    if (isInJenkins()) {
        String branch = System.getenv().GIT_BRANCH
        String[] stringArray = branch.split("/")
        if (stringArray.length > 0) {
            return stringArray[stringArray.length - 1]
        }
        return ""
    }
    String rootPath = getRootDir()
    File file = new File(rootPath + "/.git/HEAD")
    String head = file.text
    return head.trim().substring(16)
}

/**
 * 组装版本号
 */
def getBranchVersion() {
    String branch = getGitBranch()
    // 这里可以根据分支来做额外的处理
    return branch + "-SNAPSHOT"
}

plugins {
    id 'org.springframework.boot' version '2.1.11.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'java'
}

group = 'net.iotcd.api'
version = '1.0.0-SNAPSHOT'

repositories {
    maven {
        url 'http://192.168.56.129:8081/repository/maven-public'
        credentials {
            username 'admin'
            password '123456'
        }
    }
    maven { url 'https://maven.aliyun.com/repository/google' }
    maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
    maven { url 'https://maven.aliyun.com/repository/public' }
    maven { url 'https://maven.aliyun.com/repository/jcenter' }
    jcenter()
    google()
    mavenCentral()
}


ext {
    nexus_publishing_url = "http://maven.iotcd.net:8181/repository/my-repository/"
    nexus_username = "admin"
    nexus_password = "123456"
    lombok_version = "1.18.10"
    iotcd_version = getBranchVersion()
    set('springCloudVersion', "Greenwich.SR4")
}



dependencies {
    //swagger
    compile group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.9.2'
    compile group: 'io.springfox', name: 'springfox-swagger-common', version: '2.9.2'
    compile group: 'io.springfox', name: 'springfox-swagger2', version: '2.9.2'
    compile group: 'io.springfox', name: 'springfox-spring-web', version: '2.9.2'
    compile group: 'io.springfox', name: 'springfox-spi', version: '2.9.2'
    compile group: 'io.springfox', name: 'springfox-schema', version: '2.9.2'
    compile group: 'io.springfox', name: 'springfox-core', version: '2.9.2'

    //Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    //spring
    compile 'com.google.guava:guava:18.0'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    implementation 'org.springframework.cloud:spring-cloud-starter-gateway'
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: '2.1.3.RELEASE'

    //nacos
    compile 'com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-config:2.1.1.RELEASE'

    //feign
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

    //jwt
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'
    compile group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'

    //mybatis
    compile 'mysql:mysql-connector-java'
    compile 'com.baomidou:mybatis-plus-boot-starter:3.3.0'

    //日志
    compile 'net.logstash.logback:logstash-logback-encoder:6.3'
    implementation 'org.codehaus.janino:janino'

    //私服sdk通用jar
    compile("net.iotcd.api:my_sdk:1.2-SNAPSHOT") {
        exclude group: 'org.apache.tomcat.embed', module: 'tomcat-embed-core'
    }

}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

configurations {
    all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }
}
